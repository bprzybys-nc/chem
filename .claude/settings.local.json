{
  "permissions": {
    "allow": [
      "WebSearch",
      "Bash(python3:*)",
      "Bash(source:*)",
      "Bash(pip install:*)",
      "Bash(python:*)",
      "Bash(git:*)",
      "Bash(tree:*)",
      "Bash(grep:*)",
      "Bash(mkdir:*)",
      "Bash(cat:*)",
      "Bash(make:*)",
      "Bash(uv:*)",
      "Bash(find:*)",
      "Bash(chmod:*)",
      "Bash(cut:*)",
      "Bash(mv:*)",
      "Bash(curl:*)",
      "Bash(echo:*)",
      "Bash(ls:*)",
      "Bash(cd:*)",
      "Bash(pwd:*)",
      "Bash(head:*)",
      "Bash(ruff:*)",
      "Bash(mypy:*)",
      "Bash(awk:*)",
      "Bash(PYTHONPATH=:*)",
      "Bash(pytest:*)",
      "Bash(export PYTHONPATH=.)",
      "WebFetch(domain:github.com)",
      "WebFetch(domain:docs.claude.com)",
      "Read(//Users/**)",
      "Read(//private/tmp/**)",
      "Read(//tmp/**)",
      "mcp__serena__list_dir",
      "mcp__serena__find_file",
      "mcp__serena__search_for_pattern",
      "mcp__serena__get_symbols_overview",
      "mcp__serena__find_symbol",
      "mcp__serena__find_referencing_symbols",
      "mcp__serena__replace_symbol_body",
      "mcp__serena__insert_after_symbol",
      "mcp__serena__insert_before_symbol",
      "mcp__serena__write_memory",
      "mcp__serena__read_memory",
      "mcp__serena__list_memories",
      "mcp__serena__delete_memory",
      "mcp__serena__check_onboarding_performed",
      "mcp__serena__onboarding",
      "mcp__serena__think_about_collected_information",
      "mcp__serena__think_about_task_adherence",
      "mcp__serena__think_about_whether_you_are_done",
      "mcp__github__create_or_update_file",
      "mcp__github__search_repositories",
      "mcp__github__create_repository",
      "mcp__github__get_file_contents",
      "mcp__github__push_files",
      "mcp__github__create_issue",
      "mcp__github__create_pull_request",
      "mcp__github__fork_repository",
      "mcp__github__create_branch",
      "mcp__github__list_commits",
      "mcp__github__list_issues",
      "mcp__github__update_issue",
      "mcp__github__add_issue_comment",
      "mcp__github__search_code",
      "mcp__github__search_issues",
      "mcp__github__search_users",
      "mcp__github__get_issue",
      "mcp__github__get_pull_request",
      "mcp__github__list_pull_requests",
      "mcp__github__create_pull_request_review",
      "mcp__github__merge_pull_request",
      "mcp__github__get_pull_request_files",
      "mcp__github__get_pull_request_status",
      "mcp__github__update_pull_request_branch",
      "mcp__github__get_pull_request_comments",
      "mcp__github__get_pull_request_reviews",
      "mcp__sequential-thinking__sequentialthinking",
      "mcp__perplexity__perplexity_ask",
      "mcp__context7__resolve-library-id",
      "mcp__context7__get-library-docs",
      "mcp__filesystem__read_file",
      "mcp__filesystem__read_text_file",
      "mcp__filesystem__read_media_file",
      "mcp__filesystem__read_multiple_files",
      "mcp__filesystem__write_file",
      "mcp__filesystem__edit_file",
      "mcp__filesystem__create_directory",
      "mcp__filesystem__list_directory",
      "mcp__filesystem__list_directory_with_sizes",
      "mcp__filesystem__directory_tree",
      "mcp__filesystem__move_file",
      "mcp__filesystem__search_files",
      "mcp__filesystem__get_file_info",
      "mcp__filesystem__list_allowed_directories",
      "mcp__git__git_status",
      "mcp__git__git_diff_unstaged",
      "mcp__git__git_diff_staged",
      "mcp__git__git_diff",
      "mcp__git__git_commit",
      "mcp__git__git_add",
      "mcp__git__git_reset",
      "mcp__git__git_log",
      "mcp__git__git_create_branch",
      "mcp__git__git_checkout",
      "mcp__git__git_show",
      "mcp__git__git_branch",
      "mcp__repomix__pack_codebase",
      "mcp__repomix__pack_remote_repository",
      "mcp__repomix__attach_packed_output",
      "mcp__repomix__read_repomix_output",
      "mcp__repomix__grep_repomix_output",
      "mcp__repomix__file_system_read_file",
      "mcp__repomix__file_system_read_directory",
      "SlashCommand(/generate-prp:*)",
      "SlashCommand(/execute-prp:*)",
      "SlashCommand(/peer-review:*)",
      "SlashCommand(/update-context:*)",
      "SlashCommand(/validate-prp-system:*)",
      "SlashCommand(/analyze-codebase:*)",
      "SlashCommand(/init-context-engineering:*)",
      "Bash(lsof:*)",
      "Bash(xargs kill:*)",
      "Bash(npx create-next-app:*)",
      "Bash(npm install:*)",
      "Bash(npm run build:*)",
      "Bash(npm run lint)",
      "Bash(npm run generate:api:*)",
      "Bash(npm run dev:*)"
    ],
    "deny": [],
    "ask": []
  }
}