// This file is auto-generated by @hey-api/openapi-ts

import type { Client, Options as Options2, TDataShape } from './client';
import { client } from './client.gen';
import type { CalculatePropertiesApiMoleculesPropertiesPostData, CalculatePropertiesApiMoleculesPropertiesPostErrors, CalculatePropertiesApiMoleculesPropertiesPostResponses, ConvertMoleculeApiMoleculesConvertPostData, ConvertMoleculeApiMoleculesConvertPostErrors, ConvertMoleculeApiMoleculesConvertPostResponses, HealthCheckHealthGetData, HealthCheckHealthGetResponses, RootGetData, RootGetResponses, ValidateMoleculeApiMoleculesValidatePostData, ValidateMoleculeApiMoleculesValidatePostErrors, ValidateMoleculeApiMoleculesValidatePostResponses } from './types.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = Options2<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

/**
 * Convert Molecule
 * Convert molecule between formats.
 *
 * Supports: SMILES, PDB, SDF, MOL2, XYZ
 *
 * Args:
 * request: Conversion request with input/output formats and data
 *
 * Returns:
 * Converted molecule data with properties
 *
 * Raises:
 * HTTPException: If conversion fails
 */
export const convertMoleculeApiMoleculesConvertPost = <ThrowOnError extends boolean = false>(options: Options<ConvertMoleculeApiMoleculesConvertPostData, ThrowOnError>) => {
    return (options.client ?? client).post<ConvertMoleculeApiMoleculesConvertPostResponses, ConvertMoleculeApiMoleculesConvertPostErrors, ThrowOnError>({
        url: '/api/molecules/convert',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Validate Molecule
 * Validate SMILES string.
 *
 * Args:
 * request: Validation request with SMILES string
 *
 * Returns:
 * Validation result with canonical SMILES if valid
 *
 * Raises:
 * HTTPException: If validation encounters unexpected error
 */
export const validateMoleculeApiMoleculesValidatePost = <ThrowOnError extends boolean = false>(options: Options<ValidateMoleculeApiMoleculesValidatePostData, ThrowOnError>) => {
    return (options.client ?? client).post<ValidateMoleculeApiMoleculesValidatePostResponses, ValidateMoleculeApiMoleculesValidatePostErrors, ThrowOnError>({
        url: '/api/molecules/validate',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Calculate Properties
 * Calculate molecular properties from SMILES.
 *
 * Args:
 * request: Request with SMILES string
 *
 * Returns:
 * Molecular properties (formula, MW, atom counts, LogP, etc.)
 *
 * Raises:
 * HTTPException: If calculation fails
 */
export const calculatePropertiesApiMoleculesPropertiesPost = <ThrowOnError extends boolean = false>(options: Options<CalculatePropertiesApiMoleculesPropertiesPostData, ThrowOnError>) => {
    return (options.client ?? client).post<CalculatePropertiesApiMoleculesPropertiesPostResponses, CalculatePropertiesApiMoleculesPropertiesPostErrors, ThrowOnError>({
        url: '/api/molecules/properties',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Health Check
 * Health check endpoint.
 *
 * Returns service status for monitoring and orchestration.
 */
export const healthCheckHealthGet = <ThrowOnError extends boolean = false>(options?: Options<HealthCheckHealthGetData, ThrowOnError>) => {
    return (options?.client ?? client).get<HealthCheckHealthGetResponses, unknown, ThrowOnError>({
        url: '/health',
        ...options
    });
};

/**
 * Root
 * Root endpoint with API information.
 */
export const rootGet = <ThrowOnError extends boolean = false>(options?: Options<RootGetData, ThrowOnError>) => {
    return (options?.client ?? client).get<RootGetResponses, unknown, ThrowOnError>({
        url: '/',
        ...options
    });
};
